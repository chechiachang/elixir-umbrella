# Elixir CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-elixir/ for more details
version: 2

# ==========
# Yaml Templates
# ==========

get-gce-ssh-key: &get-gce-ssh-key
  name: Get GCE ssh key from ENV
  command: |
    mkdir -p /home/circleci/.ssh
    echo ${GCLOUD_COMPUTE_ENGINE_SSH_KEY} | base64 --decode -i > /home/circleci/.ssh/google_compute_engine
    echo ${GCLOUD_COMPUTE_ENGINE_SSH_KEY_PUB} | base64 --decode -i > /home/circleci/.ssh/google_compute_engine.pub
    chmod 400 /home/circleci/.ssh/google_compute_engine

deploy-gce: &deploy-gce
  docker:
    - image: circleci/python:3.6.5
  steps:
    - restore_cache:
        keys:
          - gcloud-sdk-v2-{{ .Branch }}
    - restore_cache:
        keys:
          - gcloud-config-v2-{{ .Branch }}
    - attach_workspace:
        at: .
    - run: *get-gce-ssh-key
    - run:
        name: Deploy Endpoint
        environment:
          GCP_PROJECT: chechiachang
          GCE_ZONE: asia-east1-b
          GCE_IMAGE_PROJECT: chechiachang
          GCE_IMAGE_FAMILY: chechiachang-ci
        command: |
          source /home/circleci/google-cloud-sdk/path.bash.inc
          echo "Deploy GCE"

deploy-gke: &deploy-gke
  docker:
    - image: circleci/python:3.6.5
  steps:
    - restore_cache:
        keys:
          - gcloud-sdk-v2-{{ .Branch }}
    - restore_cache:
        keys:
          - gcloud-config-v2-{{ .Branch }}
    - attach_workspace:
        at: .
    - run:
        name: Prepull Image
        command: |
          source /home/circleci/google-cloud-sdk/path.bash.inc
          gcloud container clusters get-credentials ${GKE_CLUSTER_NAME}
          echo "Deploy prepull"
    - run:
        name: Migrate database
        command: |
          echo "Deploy GKE"

workflows:
  version: 2
  build-test-deploy:
    jobs:
      - checkout:
          filters:
            tags:
              only: /.*/

      - build:
          requires:
            - checkout
          filters:
            tags:
              only: /.*/

      - test:
          requires:
            - build
          filters:
            tags:
              only: /.*/

      - create-gce-image:
          requires:
            - checkout

      # GCE deployment #

      - ?deploy-endpoint:
          requires:
            - build
            - test
          filters:
            branches:
              ignore:
                - master
          type: approval
      - deploy-endpoint:
          requires:
            - ?deploy-endpoint
      - ?delete-endpoint:
          requires:
            - deploy-endpoint
          type: approval
      - delete-endpoint:
          requires:
            - ?delete-endpoint

      - ?deploy-dev:
          requires:
            - build
            - test
          filters:
            branches:
              ignore:
                - master
          type: approval
      - deploy-dev:
          requires:
            - ?deploy-dev

      #- deploy-sandbox:
      #    requires:
      #      - build
      #      - test
      #    filters:
      #      branches:
      #        only:
      #          - master
      #          - sandbox

      # GKE deployment #

      - container-image:
          requires:
            - checkout
          filters:
            tags:
              only: /.*/
            branches:
              only:
                - master
                - dev

      # Enforce manually approval to avoid interupting QA testing
      - ?deploy-staging:
          requires:
            - build
            - test
            - container-image
          type: approval
          filters:
            branches:
              only:
                - master
                - dev
      - deploy-staging:
          requires:
            - ?deploy-staging
      - ?stress-test:
          type: approval
          requires:
            - deploy-staging
      - stress-test:
          requires:
            - ?stress-test

      - deploy-prod:
          requires:
            - build
            - test
            - container-image
          filters:
            tags:
              only: /^[0-9]+\.[0-9]+\.[0-9]+$/
            branches:
              ignore: /.*/

      # Test circleci workflow with devops branch#
      - ci-config-test:
          filters:
            branches:
              only:
                - devops

  # DISABLED
  # Test clean-elasticsearch job with master
  #- ?clean-elasticsearch:
  #    type: approval
  #    requires:
  #      - checkout
  #    filters:
  #      branches:
  #        only:
  #          - master
  #          - devops
  #- clean-elasticsearch:
  #    requires:
  #      - ?clean-elasticsearch
  #
  # Clean outdated elasticsearch index to reduce storage usage and JVM memory preassure.
  #cronjob-clean-elasticsearch:
  #  triggers:
  #    - schedule:
  #        #cron: "30 1 * * 1-5" # 9:30+8:00 every Mon-Fri
  #        cron: "30 1 * * *" # 9:30+8:00 everyday
  #        filters:
  #          branches:
  #            only:
  #              - master
  #  jobs:
  #    - checkout:
  #        filters:
  #          tags:
  #            only: /.*/
  #    - clean-elasticsearch:
  #        requires:
  #          - checkout

# ==========
# Jobs
# ==========

jobs:
  checkout:
    docker:
      - image: "circleci/elixir:1.10"
    steps:
      - attach_workspace:
          at: .
      - checkout
      - run:
          name: Pull Submodule
          command: git submodule update --init
      - persist_to_workspace:
          root: .
          paths: .
  build:
    docker:
      # specify the version here
      - image: "circleci/elixir:1.10"

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    steps:
      - attach_workspace:
          at: .

      - run: mix local.hex --force  # install Hex locally (without prompt)
      - run: mix local.rebar --force  # fetch a copy of rebar (without prompt)

      - restore_cache:  # restores saved mix cache
      # Read about caching dependencies: https://circleci.com/docs/2.0/caching/
          keys:  # list of cache keys, in decreasing specificity
            - v1-mix-cache-{{ .Branch }}-{{ checksum "mix.lock" }}
            - v1-mix-cache-{{ .Branch }}
            - v1-mix-cache
      - restore_cache:  # restores saved build cache
          keys:
            - v1-build-cache-{{ .Branch }}
            - v1-build-cache

      - run: mix do deps.get, compile  # get updated dependencies & compile them

      - save_cache:  # generate and store mix cache
          key: v1-mix-cache-{{ .Branch }}-{{ checksum "mix.lock" }}
          paths: "deps"
      - save_cache:  # make another, less specific cache
          key: v1-mix-cache-{{ .Branch }}
          paths: "deps"
      - save_cache:  # you should really save one more cache (just in case)
          key: v1-mix-cache
          paths: "deps"
      - save_cache: # don't forget to save a *build* cache, too
          key: v1-build-cache-{{ .Branch }}
          paths: "_build"
      - save_cache: # and one more build cache for good measure
          key: v1-build-cache
          paths: "_build"

      - persist_to_workspace:
          root: .
          paths: .
    
  test:
    docker:
      # specify the version here
      - image: "circleci/elixir:1.10"

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

      - image: mysql:5.7.26
        environment:
          MYSQL_USER: root
          MYSQL_DATABASE: elixir
          MYSQL_ALLOW_EMPTY_PASSWORD: true
        command: --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci

      - image: redis:5.0.0

      - image: wurstmeister/zookeeper
        ports:
          - "2181:2181"

      - image: "wurstmeister/kafka:2.11-1.1.1"
        ports:
        - "9092:9092"
        environment:
          KAFKA_ADVERTISED_HOST_NAME: 127.0.0.1
          KAFKA_ZOOKEEPER_CONNECT: 127.0.0.1:2181
        volumes:
          - /var/run/docker.sock:/var/run/docker.sock

    steps:
      - attach_workspace:
          at: .

      - run:  # special utility that stalls main process until DB is ready
          name: Wait for DB
          command: dockerize -wait tcp://localhost:3306 -timeout 1m

      - run: mix test  # run all tests in project

      - store_test_results:  # upload junit test results for display in Test Summary
          # Read more: https://circleci.com/docs/2.0/collect-test-data/
          path: _build/test/lib/elixir_umbrella # Replace with the name of your :app

  create-gce-image:
    docker:
    - image: "circleci/elixir:1.10"
    steps:
      - restore_cache:
          keys:
            - gcloud-sdk-v2-{{ .Branch }}
      - restore_cache:
          keys:
            - gcloud-config-v2-{{ .Branch }}
      - attach_workspace:
          at: .
      - restore_cache:
          key: v2-dependencies-{{ checksum "poetry.lock" }}
      - run: *get-gce-ssh-key
      - run:
          name: Create GCE Image if needed
          command: |
            if git log --name-only --oneline -1 | grep poetry.lock; then
              source /home/circleci/google-cloud-sdk/path.bash.inc
              .circleci/create-gce-image.sh
            fi
  
  container-image:
    docker:
    - image: "circleci/elixir:1.10"
    steps:
      - restore_cache:
          keys:
            - gcloud-sdk-v2-{{ .Branch }}
      - restore_cache:
          keys:
            - gcloud-config-v2-{{ .Branch }}
      - attach_workspace:
          at: .
      - run:
          name: Build Image
          command: |
            source /home/circleci/google-cloud-sdk/path.bash.inc
            cd conf && make gcloud_container_builds_submit_chechiachang-server
  
  deploy-staging:
    <<: *deploy-gke
    environment:
      SITE: staging
      CLOUDSQL_NAME: chechiachang:asia-east1:staging-sql
      CLOUDSQL_PROXY_PORT: tcp:3306
      GKE_CLUSTER_NAME: staging-server
  
  deploy-prod:
    <<: *deploy-gke
    environment:
      SITE: prod
      CLOUDSQL_NAME: chechiachang:asia-east1:prod-sql
      CLOUDSQL_PROXY_PORT: tcp:3306
      GKE_CLUSTER_NAME: prod-server
  
  ci-config-test:
    environment:
      SITE: staging
    docker:
      - image: "circleci/elixir:1.10"
    steps:
      - restore_cache:
          keys:
            - gcloud-sdk-v2-{{ .Branch }}
      - restore_cache:
          keys:
            - gcloud-config-v2-{{ .Branch }}
      - run:
          name: Wait For Pending Pods
          command: |
            source /home/circleci/google-cloud-sdk/path.bash.inc
            for counter in $(seq 1 20); do
              pending_pod_names=$(kubectl get pod --field-selector=status.phase=Pending -o=go-template="{{range .items}}{{.metadata.name}}{{end}}")
              if [[ ${pending_pod_names} == "" ]]; then
                echo "No pending pods" && exit 0
              fi
              echo "Wait for Pending pods...${counter}" && sleep 5
            done
            echo "Timeout waiting Pending pods." && exit 1
  
  stress-test:
    docker:
      - image: circleci/node:8.12.0-stretch-browsers
    steps:
      - restore_cache:
          keys:
            - gcloud-sdk-v2-{{ .Branch }}
      - restore_cache:
          keys:
            - gcloud-config-v2-{{ .Branch }}
      - attach_workspace:
          at: .
      - run:
          name: Install artillery
          command: |
            npm install artillery
            node_modules/artillery/bin/artillery
      # TODO cache artillery
      - run:
          name: Get Authorization from Staging
          command: |
            source /home/circleci/google-cloud-sdk/path.bash.inc
            node_modules/artillery/bin/artillery run -e staging -o artillery-socketio-$(date +%Y-%m-%dT%H:%M:%S).log conf/stress/socketio.yaml
            node_modules/artillery/bin/artillery run -e staging -o artillery-http-$(date +%Y-%m-%dT%H:%M:%S).log conf/stress/server.yaml
  
  deploy-endpoint:
    <<: *deploy-gce
  
  deploy-dev:
    <<: *deploy-gce
    environment:
      INSTANCE_NAME: dev-chechiachang-server
      SUBDOMAIN_NAME: api.dev.chechiachang.com # Overwrite default domain (api.CIRCLE_BRANCH.chechiachang.com)
  
  deploy-sandbox:
    <<: *deploy-gce
    environment:
      INSTANCE_NAME: sandbox-chechiachang-server
      SUBDOMAIN_NAME: api.sandbox.chechiachang.com # Overwrite default domain (api.master.chechiachang.com)
  
  delete-endpoint:
    docker:
      - image: circleci/python:3.6.5
    environment:
      GCP_PROJECT: chechiachang
      GCE_ZONE: asia-east1-b
      GCE_ADMIN_USER: circleci
    steps:
      - restore_cache:
          keys:
            - gcloud-sdk-v2-{{ .Branch }}
      - restore_cache:
          keys:
            - gcloud-config-v2-{{ .Branch }}
      - attach_workspace:
          at: .
      - run:
          name: Delete Endpoint
          command: |
            source /home/circleci/google-cloud-sdk/path.bash.inc
  
            INSTANCE_NAME="ci-chechiachang-server-${CIRCLE_BRANCH//_/-}"
            INSTANCE_NAME=${INSTANCE_NAME:0:63}
  
            # Retrieve Cloudflare DNS id from GCE metadata and delete the DNS record
            CLOUDFLARE_DNS_ID=$(gcloud compute instances describe ${INSTANCE_NAME} --format "value[](metadata.items.cloudflare_dns_id)")
            curl -X DELETE "https://api.cloudflare.com/client/v4/zones/${CLOUDFLARE_ZONE_ID}/dns_records/${CLOUDFLARE_DNS_ID}" \
                 -H "X-Auth-Email: ${CLOUDFLARE_EMAIL}" \
                 -H "X-Auth-Key: ${CLOUDFLARE_API_KEY}" \
                 -H "Content-Type: application/json"
  
            gcloud compute instances delete --quiet ${INSTANCE_NAME}
  
  # Clean outdated elasticsearch index to reduce storage usage and JVM memory preassure.
  clean-elasticsearch:
    docker:
      - image: circleci/python:3.6.5
    steps:
      - restore_cache:
          keys:
            - curator-v2
      - attach_workspace:
          at: .
      - run:
          name: Clean Elasticsearch
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install elasticsearch-curator
            curator --config conf/elk/curator/chechiachang/config.yml conf/elk/curator/chechiachang/actions-delete-indices.yml
  
            curl -X POST --data-urlencode "payload={
            \"channel\": \"#devops\",
            \"username\": \"Clean Elasticsearch Done\",
            \"text\": \"Build <${CIRCLE_BUILD_URL}|#${CIRCLE_BUILD_NUM}> of ${CIRCLE_PROJECT_REPONAME}@${CIRCLE_BRANCH}\n triggered by ${CIRCLE_USERNAME}\",
            \"icon_emoji\": \":devops:\"
            }" ${SLACK_URL}
            if [[ "$?" != "0" ]]; then echo "slack webhook not return ok" && exit 1; fi
      - save_cache:
          key: curator-v2
          paths:
            - venv
